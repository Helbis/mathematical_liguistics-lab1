#include <cstddef>
#include <cstdlib>
#include <iostream>
#include <string>

enum class state : unsigned int {
  Q0 = 0u,
  Q1,
  Q2,
  Q3,
  Q4,
  Q5,
  Q6,
  Q7,
  Q8,
  Q9,
  Q10,
  Q11,
  Q12,
  Q13,
  Q14,
  Q15,
  Q16,
  Q17,
  Q18,
  Q19,
  Q20,
  Q_return_1_back_20,
  Q_return_2_back_20,
  Q_return_3_back_20,
  Q_return_4_back_20,
  Q_return_5_back_20,
  Q_execute_basic_return_1,
  Q_execute_basic_return_2,
  Q_execute_basic_return_3,
  Q_execute_basic_return_4,
  Q_execute_basic_return_5,
  Q_return_1,
  Q_return_2,
  Q_return_3,
  Q_return_4,
  Q_return_5,
  Q_return_6,
  Q_return_7,
  Q_return_8,
  Q_return_9,
  Q_return_10,
  Q_return_11,
  Q_return_12,
  Q_return_13,
  Q_return_14,
  Q_return_15,
  Q_return_16,
  Q_return_17,
  Q_return_18,
  Q_return_19,
  Q_return_20,
  Q_execute_basic,
  Q_execute_basic_wax,
  Q_change,
  Q_quit
};

enum class alphabet : unsigned int {
  ONE = 0u,
  TWO,
  FIVE,
  EX_BASIC,
  EX_WAX,
  GET_CHANGE,
  NONE
};

constexpr unsigned int NUM_OF_STATES =
    static_cast<unsigned int>(state::Q_quit) + 1;
constexpr unsigned int NUM_OF_LETTERS =
    static_cast<unsigned int>(alphabet::NONE) + 1;

// setting that size is a trick to get number of elements of each enum
const state transitionsMatrix[NUM_OF_LETTERS][NUM_OF_STATES] = {
    {state::Q1,
     state::Q2,
     state::Q3,
     state::Q4,
     state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q15,
     state::Q16,
     state::Q17,
     state::Q18,
     state::Q19,
     state::Q20,
     state::Q_return_1_back_20,
     state::Q_return_1_back_20,
     state::Q_return_1_back_20,
     state::Q_return_1_back_20,
     state::Q_return_1_back_20,
     state::Q_return_1_back_20,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_1,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_return_1,
     state::Q_return_1,
     state::Q_return_1,
     state::Q_return_1},
    {state::Q2,
     state::Q3,
     state::Q4,
     state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q15,
     state::Q16,
     state::Q17,
     state::Q18,
     state::Q19,
     state::Q20,
     state::Q_return_1_back_20,
     state::Q_return_2_back_20,
     state::Q_return_2_back_20,
     state::Q_return_2_back_20,
     state::Q_return_2_back_20,
     state::Q_return_2_back_20,
     state::Q_return_2_back_20,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_2,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_return_2,
     state::Q_return_2,
     state::Q_return_2,
     state::Q_return_2},
    {state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q15,
     state::Q16,
     state::Q17,
     state::Q18,
     state::Q19,
     state::Q20,
     state::Q_return_1_back_20,
     state::Q_return_2_back_20,
     state::Q_return_3_back_20,
     state::Q_return_4_back_20,
     state::Q_return_5_back_20,
     state::Q_return_5_back_20,
     state::Q_return_5_back_20,
     state::Q_return_5_back_20,
     state::Q_return_5_back_20,
     state::Q_return_5_back_20,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic_return_5,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_return_5,
     state::Q_return_5,
     state::Q_return_5,
     state::Q_return_5},
    {state::Q0,
     state::Q1,
     state::Q2,
     state::Q3,
     state::Q4,
     state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q_execute_basic,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_3,
     state::Q_execute_basic_return_4,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic_return_1,
     state::Q_execute_basic_return_2,
     state::Q_execute_basic_return_3,
     state::Q_execute_basic_return_4,
     state::Q_execute_basic_return_5,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q0,
     state::Q_quit},
    {state::Q0,
     state::Q1,
     state::Q2,
     state::Q3,
     state::Q4,
     state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q15,
     state::Q16,
     state::Q17,
     state::Q18,
     state::Q19,
     state::Q_execute_basic_wax,
     state::Q_execute_basic_wax,
     state::Q_execute_basic_wax,
     state::Q_execute_basic_wax,
     state::Q_execute_basic_wax,
     state::Q_execute_basic_wax,
     state::Q15,
     state::Q15,
     state::Q15,
     state::Q15,
     state::Q15,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q0,
     state::Q_quit},
    {state::Q0,          state::Q_return_1,  state::Q_return_2,
     state::Q_return_3,  state::Q_return_4,  state::Q_return_5,
     state::Q_return_6,  state::Q_return_7,  state::Q_return_8,
     state::Q_return_9,  state::Q_return_10, state::Q_return_11,
     state::Q_return_12, state::Q_return_13, state::Q_return_14,
     state::Q_return_15, state::Q_return_16, state::Q_return_17,
     state::Q_return_18, state::Q_return_19, state::Q_return_20,
     state::Q_return_20, state::Q_return_20, state::Q_return_20,
     state::Q_return_20, state::Q_return_20, state::Q_return_15,
     state::Q_return_15, state::Q_return_15, state::Q_return_15,
     state::Q_return_15, state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q_quit,
     state::Q_quit,      state::Q_quit,      state::Q0,
     state::Q_quit},
    {state::Q0,
     state::Q1,
     state::Q2,
     state::Q3,
     state::Q4,
     state::Q5,
     state::Q6,
     state::Q7,
     state::Q8,
     state::Q9,
     state::Q10,
     state::Q11,
     state::Q12,
     state::Q13,
     state::Q14,
     state::Q15,
     state::Q16,
     state::Q17,
     state::Q18,
     state::Q19,
     state::Q20,
     state::Q20,
     state::Q20,
     state::Q20,
     state::Q20,
     state::Q20,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_execute_basic,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q_quit,
     state::Q0,
     state::Q_quit}};

const std::string stateStrings[NUM_OF_STATES] = {"Q0",
                                                 "Q1",
                                                 "Q2",
                                                 "Q3",
                                                 "Q4",
                                                 "Q5",
                                                 "Q6",
                                                 "Q7",
                                                 "Q8",
                                                 "Q9",
                                                 "Q10",
                                                 "Q11",
                                                 "Q12",
                                                 "Q13",
                                                 "Q14",
                                                 "Q15",
                                                 "Q16",
                                                 "Q17",
                                                 "Q18",
                                                 "Q19",
                                                 "Q20",
                                                 "Q_return_1_back_20",
                                                 "Q_return_2_back_20",
                                                 "Q_return_3_back_20",
                                                 "Q_return_4_back_20",
                                                 "Q_return_5_back_20",
                                                 "Q_execute_basic_return_1",
                                                 "Q_execute_basic_return_2",
                                                 "Q_execute_basic_return_3",
                                                 "Q_execute_basic_return_4",
                                                 "Q_execute_basic_return_5",
                                                 "Q_return_1",
                                                 "Q_return_2",
                                                 "Q_return_3",
                                                 "Q_return_4",
                                                 "Q_return_5",
                                                 "Q_return_6",
                                                 "Q_return_7",
                                                 "Q_return_8",
                                                 "Q_return_9",
                                                 "Q_return_10",
                                                 "Q_return_11",
                                                 "Q_return_12",
                                                 "Q_return_13",
                                                 "Q_return_14",
                                                 "Q_return_15",
                                                 "Q_return_16",
                                                 "Q_return_17",
                                                 "Q_return_18",
                                                 "Q_return_19",
                                                 "Q_return_20",
                                                 "Q_execute_basic",
                                                 "Q_execute_basic_wax",
                                                 "Q_change",
                                                 "Q_quit"};

auto getAlphabet(const std::string &str) noexcept -> alphabet {
  if (str.empty()) {
    return alphabet::NONE;
  }

  switch (str.at(0)) {
  case '1':
    return alphabet::ONE;
  case '2':
    return alphabet::TWO;
  case '5':
    return alphabet::FIVE;
  case 'b':
    return alphabet::EX_BASIC;
  case 'w':
    return alphabet::EX_WAX;
  case 'c':
    return alphabet::GET_CHANGE;
  default:
    return alphabet::NONE;
  }
}

auto transition(const std::string &in, const state &currentState) noexcept
    -> state {
  return transitionsMatrix[static_cast<unsigned int>(getAlphabet(in))]
                          [static_cast<unsigned int>(currentState)];
}

auto stateToString(const state &currentState) noexcept -> std::string {
  return stateStrings[static_cast<unsigned int>(currentState)];
}

auto main() -> int {
  std::cout << "Welcome to the car wash!" << std::endl;

  constexpr std::size_t INPUT_SIZE = 8u;
  std::string input{};
  input.reserve(INPUT_SIZE);

  state currentState = state::Q0;

  while (true) {
    std::cout << "Current state:\t" << stateToString(currentState) << std::endl;
    std::cout << "input: ";
    std::getline(std::cin, input);
    std::cout << input << std::endl;

    currentState = transition(input, currentState);

    if (currentState == state::Q_quit) {
      std::cout << "Thank you for using our car wash" << std::endl;
      return EXIT_SUCCESS;
    }
  }

  return EXIT_FAILURE;
}
